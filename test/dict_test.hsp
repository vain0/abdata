#include "../abdata/all.hsp"

#module
#deffunc dictTest_main
	randomize
	n = rnd(100)
	
	dim idt
	dim sdt
	dim mdt
	
	// 構築テスト、容量のチェック
	dict_new mdt, vartype("struct"), n
	assert dict_type(mdt) == vartype("struct")
	assert dict_capacity(mdt) >= n
	assert dict_size(mdt) == 0
	
	// 構築テスト
	// 要求キャパシティ以下の個数を挿入して、再構成が生じないことを確認
	repeat 5
		n = rnd(100)
		
		dim idt
		dict_new idt, vartype("int"), n
		assert dict_needs_rebuild(idt, n) == 0
		capa = dict_capacity(idt)
		repeat n
			dict_insert idt, ref_xs("#" + cnt), ref_xi(cnt)
		loop
		assert dict_capacity(idt) == capa
	loop
	
	// 構築テスト: 連番、自動再構成
	dim idt
	n = 111
	dict_new idt, vartype("int")
	repeat n
		dict_insert idt, ref_xs("#" + cnt), ref_xi(cnt)
		
		assert dict_get(idt, ref_xs("#" + cnt)) == cnt
	loop
	assert dict_size(idt) == n
	
	// get, ref テスト
	repeat n
		assert dict_get(idt, ref_xs("#" + cnt)) == cnt
		dup r, dict_ref(idt, ref_xs("#" + cnt))
		assert r == cnt
	loop
	
	// iter_kv のテスト
	sdim keys, , n
	dim  vals, n
	dict_iter_kv idt, key, val
		assert keys(val) == ""
		keys(val) = key
		vals(val) = val
	dict_iter_kv_end
	
	repeat n
		assert dict_get(idt, ref_xs(keys(cnt))) == vals(cnt)
	loop
	dim keys : dim vals
	dim key  : dim val
	
	// 連想リストへのコピー
	dict_copy_to_alist idt, keys, vals
	assert stat == n
	
	sortval vals(cnt)
	repeat n
		sortget i, cnt
		assert keys(i) == "#" + cnt
		assert vals(cnt) = cnt
	loop
	dim keys : dim vals
	
	// 要素の除去のテスト
	// {
		// 存在しない要素の除去
		dict_erase idt, ref_xs("#10000")
		assert stat == 0
		assert dict_size(idt) == n
		
		// 存在する要素の除去
		dict_erase idt, ref_xs("#1")
		assert stat
		assert dict_size(idt) == n - 1
		
		// 全要素の状態を確認
		repeat n
			if ( cnt == 1 ) { continue }
			assert dict_get(idt, ref_xs("#" + cnt)) == cnt
		loop
		
		// 再挿入
		dict_insert idt, ref_xs("#1"), ref_xi(1)
		assert dict_size(idt) == n
	// }
	
	// 衝突テスト
	assert dict_size(idt) == n
	// {
		// 更新
		dict_insert idt, ref_xs("#0"), ref_xi(999), dict_conflict_update
		assert dict_get(idt, ref_xs("#0")) == 999
		assert dict_size(idt) == n
		
		// 維持
		dict_insert idt, ref_xs("#1"), ref_xi(999), dict_conflict_keep
		assert dict_get(idt, ref_xs("#1")) == 1
		assert dict_size(idt) == n
		
		// 記録
		dict_insert idt, ref_xs("#2"), ref_xi(999), dict_conflict_record
		assert dict_get(idt, ref_xs("#2")) == 2
		assert dict_size(idt) == n
		
		assert dict_conflicts_size(idt) == 1
		dict_conflicts_iter idt, key
			assert key == "#2"
		dict_conflicts_iter_end
		
		// 全衝突
		dict_chain idt, idt, dict_conflict_record
		assert dict_conflicts_size(idt) == dict_size(idt)
	// }
	
	return
#global

	dictTest_main
	logmes "dict test completed."
