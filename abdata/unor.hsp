#ifndef ig_abdata_unor_hsp
#define ig_abdata_unor_hsp

#include "abheader.hsp"
#include "list.hsp"
#include "alg_iter.hsp"
#include "mod_pvalptr.hsp"
#include "mod_ref.hsp"

#module abdata_unor_impl mlistKey, mlistValue

#define ctype operate_strcmp(%1,%2,%3) ( (%1) != (%3) %2 0 )
#define true  1
#define false 0

#define global unorImpl_new(%1)    newmod %1, abdata_unor_impl@
#define global unorImpl_delete(%1) delmod %1

//------------------------------------------------
// [i] 構築
//------------------------------------------------
#modinit
	mlistKey = list_make()
	mlistValue = list_make()
	return getaptr(thismod)
	
//------------------------------------------------
// 内部用の読み書き
//------------------------------------------------
#modfunc unorImpl_dup_members@abdata_unor_impl array keys, array vals
	dup keys, mlistKey
	dup vals, mlistValue
	return
	
//------------------------------------------------
// 値の取得 ( 命令形式 )
// 
// @ *_get_v_by_index_ : (idx) → value
// @ *_get_v_         : (key) → idx : *_get_v_by_index_
// @ *_get_try_v_()   : *_get_v_ の、キーが存在しないとき失敗し false を返す版。
//------------------------------------------------
#modfunc unorImpl_getv_by_index_ int i, var result, int bRemove
	list_getv mlistValue, result, i
	
	if ( bRemove ) {
		unorImpl_erase_by_index_ thismod, i
	}
	return
	
#modfunc unorImpl_getv_ str key, var result, int bRemove
	unorImpl_getv_by_index_ thismod, unorImpl_getIndex(thismod, key), result, bRemove
	return
	
#modcfunc unorImpl_try_getv_ str key, var result, int bRemove,  local idx
	idx = unorImpl_getIndex(thismod, key, true)
	if ( idx < 0 ) { return false }
	
	unorImpl_getv_by_index_ thismod, idx, result, bRemove
	return true
	
#define global unorImpl_getv(%1, %2 = "", %3) unorImpl_getv_ %1, %2, %3, 0
#define global unorImpl_popv(%1, %2 = "", %3) unorImpl_getv_ %1, %2, %3, 1

//------------------------------------------------
// 値の取得 ( 関数形式 )
//------------------------------------------------
#modcfunc unorImpl_get_ str key, int bRemove,  local tmp
	unorImpl_getv_ thismod, key, tmp, bRemove
	return tmp
	
#modcfunc unorImpl_tryget_ str key, var result, int bRemove,  local tmp
	return unorImpl_try_getv_( thismod, key, result, bRemove )
	
#define global ctype unorImpl_get(%1, %2 = "") unorImpl_get_(%1, %2, 0)
#define global ctype unorImpl_pop(%1, %2 = "") unorImpl_get_(%1, %2, 1)

#define global ctype unorImpl_tryget(%1, %2 = "", %3) unorImpl_tryget_(%1, %2, %3, 0)
#define global ctype unorImpl_trypop(%1, %2 = "", %3) unorImpl_tryget_(%1, %2, %3, 1)

//------------------------------------------------
// 参照化 ( 命令形式 )
//------------------------------------------------
#modfunc unorImpl_dup_by_index_ var vRef, int i
	list_dup mlistValue, vRef, i
	return
	
#modfunc unorImpl_dup str key, var vRef
	unorImpl_dup_by_index_ thismod, vRef, unorImpl_getIndex( thismod, key )
	return
	
#modfunc unorImpl_dup_kv_by_index_@abdata_unor_impl var key, var value, int i
	list_dup mlistKey,     key, i
	list_dup mlistValue, value, i
	return
	
//------------------------------------------------
// 参照化 ( 関数形式 )
//------------------------------------------------
#define global ctype unorImpl_ref(%1, %2 = "") \
	ref_ref_expr_template_2(unorImpl_ref_, %1, %2)

#modcfunc unorImpl_ref_by_index_ array ref, int i
	unorImpl_dup_by_index_ thismod, ref, i
	return 0
	
#modcfunc unorImpl_ref_ array ref, str key
	return unorImpl_ref_by_index_( thismod, ref, unorImpl_getIndex(thismod, key) )
	
//------------------------------------------------
// 型の取得 ( 関数形式 )
//------------------------------------------------
#modcfunc unorImpl_vartype_by_index_ int i
	return list_vartype( mlistValue, i )
	
#define global ctype unorImpl_vartype(%1,%2="") unorImpl_vartype_(%1, %2)
#modcfunc unorImpl_vartype_ str key
	return unorImpl_vartype_by_index_( thismod, unorImpl_getIndex(thismod, key) )
	
//------------------------------------------------
// 値の設定
//------------------------------------------------
#define global unorImpl_set(%1, %2 = "" ,%3) %tabdata \
	_cat@__abdata(%i,@__tmp) = %3 :\
	unorImpl_setv %1, %2, _cat@__abdata(%o,@__tmp)

#modfunc unorImpl_setv str key, var vValue
	unorImpl_setv_by_index_ thismod, unorImpl_getIndex(thismod, key), vValue
	return
	
#modfunc unorImpl_setv_by_index_ int i, var vValue
	list_setv mlistValue, vValue, i
	return
	
//------------------------------------------------
// 追加
// 
// @ 既存なら失敗
//------------------------------------------------
#define global unorImpl_add(%1, %2 = "", %3 = stt_zero@) %tabdata \
	_cat@__abdata(%i,@__tmp) = %3 :\
	unorImpl_addv %1, %2, _cat@__abdata(%o,@__tmp)

#modfunc unorImpl_addv str key, var vValue
	unorImpl_addValue thismod, key, vValue
	return
	
//------------------------------------------------
// 除去
// 
// @ 存在しない要素は除去しない。
//------------------------------------------------
#modfunc unorImpl_erase str key,  local i
	
	i = unorImpl_getIndex(thismod, key, true)
	if ( i < 0 ) { return }
	
	unorImpl_erase_by_index_ thismod, i
	return
	
#modfunc unorImpl_erase_by_index_ int i
	list_erase mlistKey,   i
	list_erase mlistValue, i
	return
	
//------------------------------------------------
// [i] 完全消去
//------------------------------------------------
#modfunc unorImpl_clear
	list_clear mlistKey
	list_clear mlistValue
	return
	
//------------------------------------------------
// [i] 連結
//------------------------------------------------
#modfunc unorImpl_chain var src,  local it

	IterateBegin src, unorImpl, it
		unorImpl_add thismod, it, unorImpl_get(src, it)
	IterateEnd
	return
	
//------------------------------------------------
// [i] 複製
//------------------------------------------------
#modfunc unorImpl_copy var src
	unorImpl_clear thismod
	unorImpl_chain thismod, src
	return
	
//------------------------------------------------
// [i] 辞書順比較
//------------------------------------------------
#modcfunc unorImpl_compare var rhs,  \
	local lhs_key, local lhs_elem, \
	local rhs_key, local rhs_elem, local keys, local vals, local cmp
	
	cmp = (unorImpl_size(thismod) - unorImpl_size(rhs))
	if ( cmp ) { return cmp }
	
	unorImpl_dup_members rhs, keys, vals
	repeat list_size(mlistKey)
		list_dup mlistKey, lhs_key, cnt
		list_dup     keys, rhs_key, cnt
		cmp = (lhs_key != rhs_key)
		if ( cmp ) { break }
		
		list_dup_abelem mlistValue, lhs_elem, cnt
		list_dup_abelem       vals, rhs_elem, cnt
		cmp = abelem_cmp(lhs_elem, rhs_elem)
		if ( cmp ) { break }
	loop
	return cmp

//------------------------------------------------
// [i] 反復子::初期化
//------------------------------------------------
#modfunc unorImpl_iter_init var iterData
	list_iter_init mlistKey, iterData
	return
	
//------------------------------------------------
// [i] 反復子::更新
//------------------------------------------------
#modcfunc unorImpl_iter_next var vIt, var iterData
	return list_iter_next( mlistKey, vIt, iterData )
	
//------------------------------------------------
// [i] 要素数
//------------------------------------------------
#modcfunc unorImpl_size
	return list_size( mlistKey )
	
#define global unorImpl_length unorImpl_size
#define global ctype unorImpl_empty(%1) ( unorImpl_size(%1) == 0 )

//------------------------------------------------
// 数え上げ
//------------------------------------------------
#modcfunc unorImpl_count_key str key
	return ( unorImpl_getIndex( thismod, key, true ) >= 0 )
	
#modcfunc unorImpl_count_value var value
	return list_count(mlistValue, value)
	
//------------------------------------------------
// 実際の要素番号を得る
// @private
// @prm bNoAdd: false なら、要素が見つからなかったときに挿入してその位置を返す。
// @result: 見つかった位置、または -1。
//------------------------------------------------
#modcfunc unorImpl_getIndex@abdata_unor_impl str key, int bNoAdd,  local idx
	
	unorImpl_find_ex thismod, key, idx
	if ( stat ) { return idx }
	
	if ( bNoAdd == false ) {
		unorImpl_addValue_by_index_ thismod, idx, key, stt_zero@
		return stat
	}
	return -1
	
//------------------------------------------------
// 要素を追加する
// @private
// @result: 追加した要素の要素番号
// @ 整列状態を保っておく。
// @ 重複したキーは無視する。
//------------------------------------------------
#modfunc unorImpl_addValue@abdata_unor_impl str key, var vValue,  local idx
	
	unorImpl_find_ex thismod, key, idx
	if ( stat ) { return idx }
	
	unorImpl_addValue_by_index_ thismod, idx, key, vValue
	return idx
	
#modfunc unorImpl_addValue_by_index_@abdata_unor_impl int idx, str key, var vValue
	list_insert  mlistKey,      key, idx
	list_insertv mlistValue, vValue, idx
	return idx
	
//------------------------------------------------
// 要素を検索する
//
// @prm idx: lower_bound が代入される。
// @result: 要素がみつかったかどうか
//------------------------------------------------
#modfunc unorImpl_find_ex@abdata_unor_impl str _key, var idx,  \
	local key
	
	key = _key
	idx = list_lb(mlistKey, key)
	if ( idx != list_size(mlistKey) ) {
		if ( list_get(mlistKey, idx) == key ) {
			return true
		}
	}
	return false
	
#ifdef _DEBUG

//------------------------------------------------
// デバッグ出力
//------------------------------------------------
#deffunc unorImpl_dbglog var self, str _ident,  local ident, local it
	ident = _ident
	
	logmes "[" + strtrim(ident, 0, ' ') + "] debug-log"
	
	IterateBegin self, unorImpl, it
		logmes strf("%s\t: %s", it, unorImpl_get(self, it))
	IterateEnd
	
	logmes ""
	return
	
#else //defined(_DEBUG)

#define global unorImpl_dbglog(%1) :

#endif //defined(_DEBUG)

#global

//##############################################################################
// wrapper

#define global Unor_ClsName "unor"
#define global unorNull abdataNull

#define global unor_new(%1) %1 = unor_make()
#define global unor_delete(%1) unorImpl_delete abdataInsts(%1)

#module
#defcfunc unor_make
	unorImpl_new abdataInsts_var
	return stat
#global

#define global       unor_getv(%1, %2 = "", %3) unorImpl_getv abdataInsts(%1), %2, %3
#define global       unor_popv(%1, %2 = "", %3) unorImpl_popv abdataInsts(%1), %2, %3
#define global ctype unor_get(%1, %2 = "") unorImpl_get(abdataInsts(%1), %2)
#define global ctype unor_pop(%1, %2 = "") unorImpl_pop(abdataInsts(%1), %2)

#define global ctype unor_tryget(%1, %2 = "", %3) unorImpl_tryget(abdataInsts(%1), %2, %3)
#define global ctype unor_trypop(%1, %2 = "", %3) unorImpl_trypop(abdataInsts(%1), %2, %3)

#define global       unor_dup(%1, %2 = "", %3) unorImpl_dup abdataInsts(%1), %2, %3
#define global ctype unor_ref(%1, %2 = "") unorImpl_ref(abdataInsts(%1), %2)

#define global ctype unor_vartype(%1, %2 = "") unorImpl_vartype(abdataInsts(%1), %2)

#define global unor_set(%1,%2="",%3)  unorImpl_set  abdataInsts(%1), %2, %3
#define global unor_setv(%1,%2="",%3) unorImpl_setv abdataInsts(%1), %2, %3

#define global unor_add(%1, %2 = "",%3 = stt_zero@) unorImpl_add abdataInsts(%1), %2, %3
#define global unor_addv(%1, %2, %3) unorImpl_addv abdataInsts(%1), %2, %3

#define global unor_erase(%1, %2) unorImpl_erase abdataInsts(%1), %2

#define global unor_clear(%1)     unorImpl_clear abdataInsts(%1)
#define global unor_chain(%1, %2) unorImpl_chain abdataInsts(%1), abdataInsts(%2)
#define global unor_copy(%1, %2)  unorImpl_copy  abdataInsts(%1), abdataInsts(%2)

#define global ctype unor_compare(%1, %2) \
	unorImpl_compare(abdataInsts(%1), abdataInsts(%2))

#define global       unor_iter_init(%1,%2)    unorImpl_iter_init abdataInsts(%1), %2
#define global ctype unor_iter_next(%1,%2,%3) unorImpl_iter_next(abdataInsts(%1), %2, %3)

#define global ctype unor_size(%1)  unorImpl_size(abdataInsts(%1))
#define global ctype unor_empty(%1) unorImpl_empty(abdataInsts(%1))
#define global unor_length unor_size

#define global ctype unor_count_key(%1, %2) unorImpl_count_key(abdataInsts(%1), %2)
#define global ctype unor_count_value(%1, %2) unorImpl_count_value(abdataInsts(%1), %2)

#define global unor_dbglog(%1) unorImpl_dbglog abdataInsts(%1), "%1"

#endif
